#!/bin/bash

# Vars
args=( "$@" )
VERSION=v0.1
name=
alias=
twitter=
blog_root=
blogname=

usage ()
{
	cat << EOF
blog $VERSION ~ The simple static blog toolkit.

Usage: blog [options] [blog root]

Options
-------
-h    Shows this message.
-i    init a new blog.
EOF
}

# Conifg file
config ()
{
	cat << EOF
name=Fullname
alias=Nickname
twitter=Twitter@
blogname=YourBlogName
EOF
}

# Simple blog template.
template ()
{
	cat << EOF
<!doctype html>
<html lang=en>
<title>Skiqqy's Home Page</title><meta charset=utf-8>
<meta name=Description content="Skiqqy Cochranes Home Page">
<style>
	body{
		overflow-y:scroll;
		font:16px monospace,monospace;
		background-color: #000;
		color: #fff;
	}

	a{
		color:#DC143C
	}

	img{
		max-width:57ch;
		display:block;
		height:auto;
		width:100%
	}

	.c{
		display:table-cell;max-width:999px;max-width:80ch
	}

	pre{
		margin:0;overflow-x:hidden
	}

	@media(max-width:999px){
		.c{
			display:block;
			font-size:1.94vw
		}
	}

	.header {
		padding: 60px;
		text-align: center;
		font-size: 30px;
	}

	.subheader {
		padding: 60px;
		text-align: center;
		font-size: 20px;
	}

	.box {
		width: 490px;
		border: 2.5px dashed white;
		position:center;
		text: auto;
		text-align: left;
		padding: 35px;
		margin: 10px;
	}

	.boxheader {
		text-align: center;
		font-size:20px;
	}

	.dev {
		color: orange
	}
</style>
<div class="header">%%TITLE%%</div>
<div style="text-align:center;display:table;margin:16px auto"><div class=c><pre style="top:0;position:sticky;user-select:none">
%%LINKS%%
</div>
<br>
<div class=c>
%%BODY%%
<br><br>
<pre>
%%DETAILS%%
</pre>
</div></div>
EOF
}

# Fetch links from a directory
# Usage: links "/subdirectory" "extension type (eg skup)"
links () {
	path=$(realpath "$1")
	root=${path/"$blog_root"/}
	shopt -s nullglob
	for link in "$1"/*."$2"
	do
		link=$(basename "$link")
		name=$(echo "$link" | cut -d\. -f 1)
		[[ "$root/$name" = "/template" ]] && continue
		echo "<a href=$root/$name.html>$name</a> <br>"
	done
}

# Usage: skup2html < file.skup > file.html
skup2html ()
{
	sed -E 's|a/(.*)/(.*)/|<a href="https://\1">\2</a>|g' |
	sed -E 's|^SBLOCK (.+)\.|<div class=box><div class=boxheader>\1</div><br>|g' |
	sed -E 's|^EBLOCK|</div>|g' |
	sed -E 's|\\\\|<br>|g' |

	sed -E '/TITLE. (.+)/d' |

	sed -E '/%%BODY%%/r /dev/stdin' "$blog_root"/template.html |
	sed -E '/%%BODY%%/d' |
	sed -E "s|%%DETAILS%%|$name\n$twitter|g"
}

# Init a blog directory
# Usage: init /path/to/directory"
init () {
	echo "Creating a blog in $1"

	if [ ! "$1" = . ] && ! mkdir "$1" >> /dev/null 2>&1
	then
		echo "Cannot create $1, already exists."
		exit 1
	fi

	config > "$1"/config
	template > "$1"/template.html
    echo -e "TITLE. Home\nWelcome to your blog home page! for help visit a/skiqqy.xyz/here/ :)" \
		> "$1"/home.skup
	mkdir "$1"/blogs
}

# Check if a directory is a valid blog direcory
# Usage: is_valid_blog_dir "dir"
is_valid_blog_dir ()
{
	if [ ! -f "$1/config" ]
	then
		echo "Direcory is missing a config file!"
		return 1
	elif [ ! -f "$1/home.skup" ]
	then
		echo "Direcory is missing a home.skup file!"
		return 1
	elif [ ! -f "$1/template.html" ]
	then
		echo "Direcory is missing a template file!"
		return 1
	elif [ ! -d "$1/blogs" ]
	then
		echo "Direcory is missing a blogs directory!"
		return 1
	fi
}

build () {
	echo "Building blog from $1."

	if [ ! -d "$1" ]
	then
		echo "Cannot build blog from $1, does not exist. See -i flag."
		exit 1
	fi

	IFS='='
	while read -r key val
	do
		case "$key" in
			name)
				name="$val"
				;;
			alias)
				alias="$val"
				;;
			twitter)
				twitter="$val"
				;;
			blogname)
				blogname="$val"
				;;
		esac
	done < "$1"/config

	TITLE=$(grep -E -o '^TITLE\. .+$' "$1"/home.skup | sed -E 's|TITLE\. (.+)|\1|g')
	skup2html < "$1"/home.skup | sed -E "s|%%TITLE%%|$TITLE|g" > "$1"/index.html

	# Build html
	shopt -s nullglob
	for file in "$1"/blogs/*.skup
	do
		FNAME=$(basename "$file" | cut -d\. -f 1)
		TITLE=$(grep -E -o '^TITLE\. .+$' "$file" | sed -E 's|TITLE\. (.+)|\1|g')
		skup2html < "$file" | sed -E "s|%%TITLE%%|$TITLE|g" > "$1/blogs/$FNAME.html"
	done

	# Construct Links
	mlinks=$(links "$blog_root" html)
	blinks=$(links "$blog_root/blogs" html)

	links=$(echo -e "$mlinks\n$blinks")
	links=${links//\//\\/}
	links=${links//./\\.}
	links=${links// /\\ }
	links=${links//$'\n'/} # Remove newline

	sed -E "s|%%LINKS%%|$links|g" < "$1/index.html" > "$1/buff" && mv "$1/buff" "$1/index.html"

	shopt -s nullglob
	for file in "$1"/blogs/*.html
	do
		FNAME=$(basename "$file" | cut -d\. -f 1)
		#sed -E "s|%%LINKS%%|$links|g" < "$file" > "$1/buff" && \
			#mv "$1/buff" "$1/blogs/$FNAME.html"
		sed -E "s|%%LINKS%%|<a href=\/>index<\/a> |g" < "$file" > "$1/buff" && \
			mv "$1/buff" "$1/blogs/$FNAME.html"
	done
}

main ()
{
	init=false
	index=$((${#args[@]} - 1))
	if [ "${#args}" -ge 1 ] && last=${args[$index]} && [[ ! "$last" =~ ^- ]]
	then
		blog_root="${args[$index]}"
	else
		blog_root=./myblog
	fi
	blog_root=$(realpath "$blog_root")

	while getopts "hi" opt
	do
		case "$opt" in
			h)
				usage
				exit
				;;
			i)
				init=true
				;;
			*)
				usage
				exit 1
				;;
		esac
	done

	if ! is_valid_blog_dir "$blog_root"
	then
		exit $?
	fi

	if "$init"
	then
		init "$blog_root"
	else
		build "$blog_root"
	fi
}

main "$@"
